// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SlideFormEdge /> should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SlideFormEdge
    edge={
      Object {
        "from": 1,
        "to": 2,
      }
    }
    edgeColor="blue"
    edgeIndex={1}
    form={
      Object {
        "entity": "edge",
        "title": "alpha",
        "type": "friend",
      }
    }
    nodes={
      Object {
        "1": Object {
          "name": "One",
        },
        "2": Object {
          "name": "Two",
        },
      }
    }
    stageIndex={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="slide-content"
      >
        <Connect(Node) />
        <div
          className="fake-edge"
          style={
            Object {
              "backgroundColor": "var(--blue)",
            }
          }
        />
        <Connect(Node) />
        <div
          className="alter-form__form-container"
        >
          <Connect(Scroller)>
            <Connect(AutoInitialisedForm)
              autoFocus={false}
              className="alter-form__form"
              entity="edge"
              form="EDGE_FORM_1_2"
              onSubmit={[Function]}
              title="alpha"
              type="friend"
            />
          </Connect(Scroller)>
        </div>
      </div>,
      "className": "swiper-slide",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Node) />,
          <div
            className="fake-edge"
            style={
              Object {
                "backgroundColor": "var(--blue)",
              }
            }
          />,
          <Connect(Node) />,
          <div
            className="alter-form__form-container"
          >
            <Connect(Scroller)>
              <Connect(AutoInitialisedForm)
                autoFocus={false}
                className="alter-form__form"
                entity="edge"
                form="EDGE_FORM_1_2"
                onSubmit={[Function]}
                title="alpha"
                type="friend"
              />
            </Connect(Scroller)>
          </div>,
        ],
        "className": "slide-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "fake-edge",
            "style": Object {
              "backgroundColor": "var(--blue)",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(Scroller)>
              <Connect(AutoInitialisedForm)
                autoFocus={false}
                className="alter-form__form"
                entity="edge"
                form="EDGE_FORM_1_2"
                onSubmit={[Function]}
                title="alpha"
                type="friend"
              />
            </Connect(Scroller)>,
            "className": "alter-form__form-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Connect(AutoInitialisedForm)
                autoFocus={false}
                className="alter-form__form"
                entity="edge"
                form="EDGE_FORM_1_2"
                onSubmit={[Function]}
                title="alpha"
                type="friend"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoFocus": false,
                "className": "alter-form__form",
                "entity": "edge",
                "form": "EDGE_FORM_1_2",
                "initialValues": undefined,
                "onSubmit": [Function],
                "subject": undefined,
                "title": "alpha",
                "type": "friend",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="slide-content"
        >
          <Connect(Node) />
          <div
            className="fake-edge"
            style={
              Object {
                "backgroundColor": "var(--blue)",
              }
            }
          />
          <Connect(Node) />
          <div
            className="alter-form__form-container"
          >
            <Connect(Scroller)>
              <Connect(AutoInitialisedForm)
                autoFocus={false}
                className="alter-form__form"
                entity="edge"
                form="EDGE_FORM_1_2"
                onSubmit={[Function]}
                title="alpha"
                type="friend"
              />
            </Connect(Scroller)>
          </div>
        </div>,
        "className": "swiper-slide",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(Node) />,
            <div
              className="fake-edge"
              style={
                Object {
                  "backgroundColor": "var(--blue)",
                }
              }
            />,
            <Connect(Node) />,
            <div
              className="alter-form__form-container"
            >
              <Connect(Scroller)>
                <Connect(AutoInitialisedForm)
                  autoFocus={false}
                  className="alter-form__form"
                  entity="edge"
                  form="EDGE_FORM_1_2"
                  onSubmit={[Function]}
                  title="alpha"
                  type="friend"
                />
              </Connect(Scroller)>
            </div>,
          ],
          "className": "slide-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fake-edge",
              "style": Object {
                "backgroundColor": "var(--blue)",
              },
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Connect(Scroller)>
                <Connect(AutoInitialisedForm)
                  autoFocus={false}
                  className="alter-form__form"
                  entity="edge"
                  form="EDGE_FORM_1_2"
                  onSubmit={[Function]}
                  title="alpha"
                  type="friend"
                />
              </Connect(Scroller)>,
              "className": "alter-form__form-container",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Connect(AutoInitialisedForm)
                  autoFocus={false}
                  className="alter-form__form"
                  entity="edge"
                  form="EDGE_FORM_1_2"
                  onSubmit={[Function]}
                  title="alpha"
                  type="friend"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "autoFocus": false,
                  "className": "alter-form__form",
                  "entity": "edge",
                  "form": "EDGE_FORM_1_2",
                  "initialValues": undefined,
                  "onSubmit": [Function],
                  "subject": undefined,
                  "title": "alpha",
                  "type": "friend",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
