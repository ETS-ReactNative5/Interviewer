// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LayoutNode /> renders ok 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="node-layout__node"
    style={
        Object {
            "left": 0,
            "top": 0,
            "transform": "translate(calc(77px - 50%), calc(8px - 50%))",
          }
    }
>
    <Connect(Draggable)
        animate={false}
        canDrag={false}
        canSelect={false}
        draggableType="bar"
        foo={
            Object {
                "x": 0.77,
                "y": 0.2,
              }
        }
        label={undefined}
        onDropped={[Function]}
        onMove={[Function]}
        onSelected={[Function]}
        selected={false}
    />
</div>,
  "nodes": Array [
    <div
      className="node-layout__node"
      style={
            Object {
                  "left": 0,
                  "top": 0,
                  "transform": "translate(calc(77px - 50%), calc(8px - 50%))",
                }
      }
>
      <Connect(Draggable)
            animate={false}
            canDrag={false}
            canSelect={false}
            draggableType="bar"
            foo={
                  Object {
                        "x": 0.77,
                        "y": 0.2,
                      }
            }
            label={undefined}
            onDropped={[Function]}
            onMove={[Function]}
            onSelected={[Function]}
            selected={false}
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <LayoutNode
        areaHeight={40}
        areaWidth={100}
        canDrag={false}
        canSelect={false}
        draggableType="bar"
        layout="foo"
        node={
                Object {
                        "foo": Object {
                          "x": 0.77,
                          "y": 0.2,
                        },
                      }
        }
        onDropped={[Function]}
        onSelected={[Function]}
        selected={false}
        updateNode={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": LayoutNode {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onDropped": [Function],
        "onMove": [Function],
        "onSelected": [Function],
        "props": Object {
          "areaHeight": 40,
          "areaWidth": 100,
          "canDrag": false,
          "canSelect": false,
          "draggableType": "bar",
          "layout": "foo",
          "node": Object {
            "foo": Object {
              "x": 0.77,
              "y": 0.2,
            },
          },
          "onDropped": [Function],
          "onSelected": [Function],
          "selected": false,
          "updateNode": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="node-layout__node"
          style={
                    Object {
                              "left": 0,
                              "top": 0,
                              "transform": "translate(calc(77px - 50%), calc(8px - 50%))",
                            }
          }
>
          <Connect(Draggable)
                    animate={false}
                    canDrag={false}
                    canSelect={false}
                    draggableType="bar"
                    foo={
                              Object {
                                        "x": 0.77,
                                        "y": 0.2,
                                      }
                    }
                    label={undefined}
                    onDropped={[Function]}
                    onMove={[Function]}
                    onSelected={[Function]}
                    selected={false}
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="node-layout__node"
          style={
                    Object {
                              "left": 0,
                              "top": 0,
                              "transform": "translate(calc(77px - 50%), calc(8px - 50%))",
                            }
          }
>
          <Connect(Draggable)
                    animate={false}
                    canDrag={false}
                    canSelect={false}
                    draggableType="bar"
                    foo={
                              Object {
                                        "x": 0.77,
                                        "y": 0.2,
                                      }
                    }
                    label={undefined}
                    onDropped={[Function]}
                    onMove={[Function]}
                    onSelected={[Function]}
                    selected={false}
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <LayoutNode
    areaHeight={40}
    areaWidth={100}
    canDrag={false}
    canSelect={false}
    draggableType="bar"
    layout="foo"
    node={
        Object {
            "foo": Object {
              "x": 0.77,
              "y": 0.2,
            },
          }
    }
    onDropped={[Function]}
    onSelected={[Function]}
    selected={false}
    updateNode={[Function]}
/>,
}
`;
