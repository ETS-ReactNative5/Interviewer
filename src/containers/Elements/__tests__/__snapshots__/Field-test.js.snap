// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Field /> should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Field
    component={[Function]}
    label="Name"
    name="name"
    validate={Array []}
/>,
  "nodes": Array [
    <Field
      component={[Function]}
      label="Name"
      name="name"
      validate={Array []}
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <Field
        component="Alphanumeric"
        label="Name"
        name="name"
        validation={Object {}}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Field {
        "_reactInternalInstance": [Circular],
        "component": [Function],
        "context": Object {},
        "props": Object {
          "component": "Alphanumeric",
          "label": "Name",
          "name": "name",
          "validation": Object {},
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Field
          component={[Function]}
          label="Name"
          name="name"
          validate={Array []}
/>,
        "_debugID": 4,
        "_renderedOutput": <Field
          component={[Function]}
          label="Name"
          name="name"
          validate={Array []}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Field
    component="Alphanumeric"
    label="Name"
    name="name"
    validation={Object {}}
/>,
}
`;

exports[`makeRenderInput() should return renderable component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <TextInput
    autoFocus={undefined}
    errorText={false}
    isNumericOnly={undefined}
    label={undefined}
    name="foo"
    value=""
/>,
  "nodes": Array [
    <TextInput
      autoFocus={undefined}
      errorText={false}
      isNumericOnly={undefined}
      label={undefined}
      name="foo"
      value=""
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <renderInput
        input={
                Object {
                        "name": "foo",
                        "value": "",
                      }
        }
        meta={
                Object {
                        "invalid": false,
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "input": Object {
            "name": "foo",
            "value": "",
          },
          "meta": Object {
            "invalid": false,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <TextInput
          autoFocus={undefined}
          errorText={false}
          isNumericOnly={undefined}
          label={undefined}
          name="foo"
          value=""
/>,
        "_debugID": 2,
        "_renderedOutput": <TextInput
          autoFocus={undefined}
          errorText={false}
          isNumericOnly={undefined}
          label={undefined}
          name="foo"
          value=""
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <renderInput
    input={
        Object {
            "name": "foo",
            "value": "",
          }
    }
    meta={
        Object {
            "invalid": false,
          }
    }
/>,
}
`;
