// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NodeForm /> should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <NodeForm
    addAnother={false}
    closeModal={[Function]}
    fields={
        Array [
            Object {
              "component": "TextInput",
              "variable": "foo",
            },
          ]
    }
    handleSubmit={[Function]}
    initialValues={Object {}}
    name="baz"
    node={Object {}}
    openModal={[Function]}
    resetValues={[Function]}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    title="The form title"
/>,
  "nodes": Array [
    <NodeForm
      addAnother={false}
      closeModal={[Function]}
      fields={
            Array [
                  Object {
                    "component": "TextInput",
                    "variable": "foo",
                  },
                ]
      }
      handleSubmit={[Function]}
      initialValues={Object {}}
      name="baz"
      node={Object {}}
      openModal={[Function]}
      resetValues={[Function]}
      store={
            Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                }
      }
      title="The form title"
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Connect(NodeForm)
        fields={
                Array [
                        Object {
                          "component": "TextInput",
                          "variable": "foo",
                        },
                      ]
        }
        handleSubmit={[Function]}
        name="baz"
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        }
        title="The form title"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": undefined,
        },
        "dispatchProps": Object {
          "closeModal": [Function],
          "openModal": [Function],
          "resetValues": [Function],
        },
        "doDispatchPropsDependOnOwnProps": false,
        "doStatePropsDependOnOwnProps": true,
        "finalMapDispatchToProps": [Function],
        "finalMapStateToProps": [Function],
        "hasStoreStateChanged": false,
        "haveOwnPropsChanged": false,
        "haveStatePropsBeenPrecalculated": false,
        "mergedProps": Object {
          "closeModal": [Function],
          "fields": Array [
            Object {
              "component": "TextInput",
              "variable": "foo",
            },
          ],
          "handleSubmit": [Function],
          "initialValues": Object {},
          "name": "baz",
          "openModal": [Function],
          "resetValues": [Function],
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "title": "The form title",
        },
        "props": Object {
          "fields": Array [
            Object {
              "component": "TextInput",
              "variable": "foo",
            },
          ],
          "handleSubmit": [Function],
          "name": "baz",
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "title": "The form title",
        },
        "refs": Object {},
        "renderedElement": <NodeForm
          addAnother={false}
          closeModal={[Function]}
          fields={
                    Array [
                              Object {
                                "component": "TextInput",
                                "variable": "foo",
                              },
                            ]
          }
          handleSubmit={[Function]}
          initialValues={Object {}}
          name="baz"
          node={Object {}}
          openModal={[Function]}
          resetValues={[Function]}
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
          title="The form title"
/>,
        "state": Object {
          "storeState": Object {
            "modals": Array [
              Object {
                "name": "baz",
                "open": true,
              },
            ],
            "protocol": Object {
              "config": Object {
                "registry": Object {
                  "foo": Object {
                    "label": "Foo",
                    "type": "string",
                  },
                },
              },
            },
          },
        },
        "stateProps": Object {
          "initialValues": Object {},
        },
        "statePropsPrecalculationError": null,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 20,
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <NodeForm
          addAnother={false}
          closeModal={[Function]}
          fields={
                    Array [
                              Object {
                                "component": "TextInput",
                                "variable": "foo",
                              },
                            ]
          }
          handleSubmit={[Function]}
          initialValues={Object {}}
          name="baz"
          node={Object {}}
          openModal={[Function]}
          resetValues={[Function]}
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
          title="The form title"
/>,
        "_debugID": 2,
        "_renderedOutput": <NodeForm
          addAnother={false}
          closeModal={[Function]}
          fields={
                    Array [
                              Object {
                                "component": "TextInput",
                                "variable": "foo",
                              },
                            ]
          }
          handleSubmit={[Function]}
          initialValues={Object {}}
          name="baz"
          node={Object {}}
          openModal={[Function]}
          resetValues={[Function]}
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
          title="The form title"
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(NodeForm)
    fields={
        Array [
            Object {
              "component": "TextInput",
              "variable": "foo",
            },
          ]
    }
    handleSubmit={[Function]}
    name="baz"
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    title="The form title"
/>,
}
`;
