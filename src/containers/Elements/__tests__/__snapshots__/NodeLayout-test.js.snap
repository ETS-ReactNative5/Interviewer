// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NodeLayout /> renders ok 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Connect(Droppable)
    acceptsDraggableType="POSITIONED_NODE"
    droppableName="NODE_LAYOUT"
>
    <div
        className="node-layout"
    >
        <Connect(LayoutNode)
            animate={false}
            areaHeight={456}
            areaWidth={123}
            canDrag={false}
            canSelect={false}
            draggableType="POSITIONED_NODE"
            layout="foo"
            node={
                Object {
                    "bar": "buzz",
                    "foo": Object {
                      "x": 0,
                      "y": 0,
                    },
                    "uid": 123,
                  }
            }
            onDropped={[Function]}
            onSelected={[Function]}
            selected={false}
        />
    </div>
</Connect(Droppable)>,
  "nodes": Array [
    <Connect(Droppable)
      acceptsDraggableType="POSITIONED_NODE"
      droppableName="NODE_LAYOUT"
>
      <div
            className="node-layout"
      >
            <Connect(LayoutNode)
                  animate={false}
                  areaHeight={456}
                  areaWidth={123}
                  canDrag={false}
                  canSelect={false}
                  draggableType="POSITIONED_NODE"
                  layout="foo"
                  node={
                        Object {
                              "bar": "buzz",
                              "foo": Object {
                                "x": 0,
                                "y": 0,
                              },
                              "uid": 123,
                            }
                  }
                  onDropped={[Function]}
                  onSelected={[Function]}
                  selected={false}
            />
      </div>
</Connect(Droppable)>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <NodeLayout
        attributes={Object {}}
        canPosition={false}
        canSelect={false}
        edge={null}
        height={456}
        layout="foo"
        nodes={
                Array [
                        Object {
                          "bar": "buzz",
                          "foo": Object {
                            "x": 0,
                            "y": 0,
                          },
                          "uid": 123,
                        },
                      ]
        }
        select={null}
        toggleEdge={[Function]}
        toggleNodeAttributes={[Function]}
        updateNode={[Function]}
        width={123}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": NodeLayout {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onDropNode": [Function],
        "onSelectNode": [Function],
        "props": Object {
          "attributes": Object {},
          "canPosition": false,
          "canSelect": false,
          "edge": null,
          "height": 456,
          "layout": "foo",
          "nodes": Array [
            Object {
              "bar": "buzz",
              "foo": Object {
                "x": 0,
                "y": 0,
              },
              "uid": 123,
            },
          ],
          "select": null,
          "toggleEdge": [Function],
          "toggleNodeAttributes": [Function],
          "updateNode": [Function],
          "width": 123,
        },
        "refs": Object {},
        "state": Object {
          "connectFrom": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Connect(Droppable)
          acceptsDraggableType="POSITIONED_NODE"
          droppableName="NODE_LAYOUT"
>
          <div
                    className="node-layout"
          >
                    <Connect(LayoutNode)
                              animate={false}
                              areaHeight={456}
                              areaWidth={123}
                              canDrag={false}
                              canSelect={false}
                              draggableType="POSITIONED_NODE"
                              layout="foo"
                              node={
                                        Object {
                                                  "bar": "buzz",
                                                  "foo": Object {
                                                    "x": 0,
                                                    "y": 0,
                                                  },
                                                  "uid": 123,
                                                }
                              }
                              onDropped={[Function]}
                              onSelected={[Function]}
                              selected={false}
                    />
          </div>
</Connect(Droppable)>,
        "_debugID": 2,
        "_renderedOutput": <Connect(Droppable)
          acceptsDraggableType="POSITIONED_NODE"
          droppableName="NODE_LAYOUT"
>
          <div
                    className="node-layout"
          >
                    <Connect(LayoutNode)
                              animate={false}
                              areaHeight={456}
                              areaWidth={123}
                              canDrag={false}
                              canSelect={false}
                              draggableType="POSITIONED_NODE"
                              layout="foo"
                              node={
                                        Object {
                                                  "bar": "buzz",
                                                  "foo": Object {
                                                    "x": 0,
                                                    "y": 0,
                                                  },
                                                  "uid": 123,
                                                }
                              }
                              onDropped={[Function]}
                              onSelected={[Function]}
                              selected={false}
                    />
          </div>
</Connect(Droppable)>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <NodeLayout
    attributes={Object {}}
    canPosition={false}
    canSelect={false}
    edge={null}
    height={456}
    layout="foo"
    nodes={
        Array [
            Object {
              "bar": "buzz",
              "foo": Object {
                "x": 0,
                "y": 0,
              },
              "uid": 123,
            },
          ]
    }
    select={null}
    toggleEdge={[Function]}
    toggleNodeAttributes={[Function]}
    updateNode={[Function]}
    width={123}
/>,
}
`;
